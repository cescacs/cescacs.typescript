function assertNonNullish(t,s){if(null==t)throw console.log("NonNullish assertion fail: "+s??"-"),TypeError(`Unexpected ${t} value`+(s?": "+s:""))}function assertCondition(t,s){if(!t)throw console.log("Condition assertion fail: "+(s??"-")),Error("Assertion does not hold"+(s?": "+s:""))}function isNotNullNorEmpty(t){return null!=t&&0<t.length}function isNotNullNorWhitespace(t){return null!=t&&0<t.length&&0<t.trim().length}function round2hundredths(t){return Math.round(100*(t+Number.EPSILON))/100}class Timeout{ids;constructor(){this.ids=[]}set=(i,e)=>new Promise((t,s)=>{const o=setTimeout(()=>{void 0===e?t():s(e),this.clear(o)},i);this.ids.push(o)});wrap=(t,s,o)=>Promise.race([t,this.set(s,o)]);clearAll=()=>{this.clear(...this.ids)};clear=(...s)=>{this.ids=this.ids.filter(t=>!s.includes(t)||(clearTimeout(t),!1))}}export{assertNonNullish,assertCondition,isNotNullNorEmpty,isNotNullNorWhitespace,round2hundredths,Timeout};