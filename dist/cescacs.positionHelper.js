import{csTypes as csty,csConvert as cscnv}from"./cescacs.types.js";class PositionHelper{static equals(t,i){return t[0]===i[0]&&t[1]===i[1]}static toString(t){return cscnv.columnFromIndex(t[0])+t[1].toString()}static compactPosToString(t){return cscnv.getColumnFromCompact(t)+cscnv.getLineFromCompact(t).toString()}static positionKey(t){return t[0].toString()+"-"+t[1].toString()}static parse(t){if(t){var t=t.trim().toUpperCase(),i=t.length;if(2<=i&&i<=3){i=t[0];if(csty.isColumn(i)){var o=parseInt(t.slice(1));if(csty.isLine(o))return[cscnv.toColumnIndex(i),o];throw new RangeError("Invalid line value: "+o)}throw new RangeError("Invalid column: "+i)}throw new RangeError("Invalid coordinates leght: "+t)}throw new RangeError("Empty string for coordinates value")}static fromBoardPosition(t,i,o=!1){t=[t=csty.isColumn(t)?cscnv.toColumnIndex(t):t,i];if(o&&!PositionHelper.isValidPosition(t))throw new RangeError("Invalid position: "+t);return t}static isValidPosition(t){return csty.isPosition(t)&&PositionHelper.isEvenLinesColumnIndex(t[0])==(t[1]%2==0)&&PositionHelper.isOnBoard(t[0],t[1])}static get whiteKingInitPosition(){return[8,1]}static get blackKingInitPosition(){return[8,27]}static initialQueenSideRookPosition(t,i){return i?"w"==t?[3,4]:[3,24]:"w"==t?[4,3]:[4,25]}static initialKingSideRookPosition(t,i){return i?"w"==t?[11,4]:[11,24]:"w"==t?[10,3]:[10,25]}static isPromotionPos(t,i,o){return i==(t<=7?"w"==o?21+t:7-t:"w"==o?35-t:t-7)}static isPromotionHex(t,i){var o=t[0];return t[1]==(o<=7?"w"==i?21+o:7-o:"w"==i?35-o:o-7)}static promotionDistance(t,i){var o=t[0];return"w"==i?(o<=7?21+o:35-o)-t[1]:t[1]-(o<=7?7-o:o-7)}static hexColor(t){return PositionHelper.lineHexColor(t[1])}static lineHexColor(t){switch(t%3){case 0:return"Black";case 1:return"White";case 2:return"Color";default:throw new Error}}static isOrthogonally(t,i){i=[i[0]-t[0],i[1]-t[1]];return 0==i[0]?0!=i[1]&&i[1]%2==0?0<i[1]?"ColumnUp":"ColumnDown":null:0<i[0]?i[0]==i[1]?"FileUp":i[0]==-i[1]?"FileDown":null:i[0]==i[1]?"FileInvDown":i[0]==-i[1]?"FileInvUp":null}static isDiagonally(t,i,o=!1){i=[i[0]-t[0],i[1]-t[1]];return 0==i[1]?0==i[0]||o||i[0]%2!=0?null:0<i[0]?"TransversalLineInc":"TransversalLineDec":(t=(i[0]<<1)+i[0],0<i[0]?t==i[1]?"LineUp":t==-i[1]?"LineDown":null:t==i[1]?"LineInvDown":t==-i[1]?"LineInvUp":null)}static orthogonalStep(t,i){i=PositionHelper._ORTHOGONAL_MOVES[cscnv.toOrthogonalDirectionIndex(i)];return PositionHelper.addOffset(t,i)}static diagonalStep(t,i){i=PositionHelper._DIAGONAL_MOVES[cscnv.toDiagonalDirectionIndex(i)];return PositionHelper.addOffset(t,i)}static*orthogonalRide(t,i){var o=PositionHelper._ORTHOGONAL_MOVES[cscnv.toOrthogonalDirectionIndex(i)];let n=PositionHelper.addOffset(t,o);for(;null!=n;)yield n,n=PositionHelper.addOffset(n,o)}static*diagonalRide(t,i){var o=PositionHelper._DIAGONAL_MOVES[cscnv.toDiagonalDirectionIndex(i)];let n=PositionHelper.addOffset(t,o);for(;null!=n;)yield n,n=PositionHelper.addOffset(n,o)}static*orthogonalMoves(i){for(const o of PositionHelper._ORTHOGONAL_MOVES){let t=this.addOffset(i,o);for(;null!=t;)yield t,t=PositionHelper.addOffset(t,o)}}static*diagonalMoves(i){for(const o of PositionHelper._DIAGONAL_MOVES){let t=this.addOffset(i,o);for(;null!=t;)yield t,t=PositionHelper.addOffset(t,o)}}static knightJump(t,i){i=PositionHelper._KNIGHT_MOVES[cscnv.toKnightDirectionIndex(i)];return PositionHelper.addOffset(t,i)}static*knightMoves(t){for(const o of PositionHelper._KNIGHT_MOVES){var i=this.addOffset(t,o);null!=i&&(yield i)}}static positionIteratorIncludes(t,i){for(const o of t)if(o[0]===i[0]&&o[1]===i[1])return!0;return!1}static*positionIteratorIntersection(t,i){for(const o of t)i.some(t=>o[0]===t[0]&&o[1]===t[1])&&(yield o)}static _ORTHOGONAL_MOVES=[[0,2],[0,-2],[1,1],[1,-1],[-1,1],[-1,-1]];static _DIAGONAL_MOVES=[[2,0],[-2,0],[1,3],[1,-3],[-1,3],[-1,-3]];static _KNIGHT_MOVES=[[3,1],[3,-1],[-3,1],[-3,-1],[2,4],[1,5],[2,-4],[1,-5],[-2,4],[-1,5],[-2,-4],[-1,-5]];static isOnBoard(t,i){return 0<=t&&t<=14&&(t<=7?7-t<=i&&i<=21+t:t-7<=i&&i<=35-t)}static addOffset(t,i){var o=t[0]+i[0],t=t[1]+i[1];return PositionHelper.isOnBoard(o,t)?[o,t]:null}static isEvenLinesColumnIndex=t=>t%2!=0}export{PositionHelper};