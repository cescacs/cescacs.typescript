import{assertCondition}from"./ts.general.js";const _column=["P","T","A","B","C","D","E","F","G","H","I","K","L","X","Z"],_castlingColumn=["D","E","F","H","I"],_orthogonalDirection=["ColumnUp","ColumnDown","FileUp","FileDown","FileInvUp","FileInvDown"],_diagonalDirection=["TransversalLineInc","TransversalLineDec","LineUp","LineDown","LineInvUp","LineInvDown"],_knightDirection=["TransversalLineInc-FileUp","TransversalLineInc-FileDown","TransversalLineDec-FileInvUp","TransversalLineDec-FileInvDown","LineUp-FileUp","LineUp-ColumnUp","LineDown-FileDown","LineDown-ColumnDown","LineInvUp-FileInvUp","LineInvUp-ColumnUp","LineInvDown-FileInvDown","LineInvDown-ColumnDown"],_orthogonalOrientation=[["ColumnUp","ColumnDown"],["FileUp","FileInvDown"],["FileInvUp","FileDown"]],_diagonalOrientation=[["TransversalLineInc","TransversalLineDec"],["LineUp","LineInvDown"],["LineInvUp","LineDown"]],_hexColor=["Black","White","Color"],_turn=["w","b"],_pieceName=["K","D","V","R","G","N","J","E","M","P"],_castlingStatus=["RKR","RK","KR","K","-"],_castlingString=["KRK-II","KRK-IK","KRK-IH","KRK-HIO","KRK-HIOO","KRK-HH","KRK-HG","KRK-FG","KRK-FE","KRK-EF","KRK-EE","KRD-DD","KRD-DE","KRD-HH","KRD-HG","KRD-FG","KRD-FE","KRD-EF","KRD-ED","KRR-HIH","KRR-HGG","KRR-FGG","KRR-FEE","KRR-EEF"],_grandCastlingString=["KRK-FF","KRK-FG","KRK-HG","KRK-HI","KRD-DE","KRD-DC","KRD-ED","KRD-EE","KRD-FE","KRD-FF","KRR-FFE","KRR-FGF"];var csTypes,csConvert;!function(e){e.isNumber=n=>"number"==typeof n&&!isNaN(n),e.isColumn=n=>_column.includes(n),e.isColumnIndex=n=>e.isNumber(n)&&Number.isInteger(n)&&0<=n.valueOf()&&n.valueOf()<=14,e.isLine=n=>e.isNumber(n)&&Number.isInteger(n)&&0<=n.valueOf()&&n.valueOf()<=28,e.isPosition=n=>Array.isArray(n)&&2==n.length&&e.isColumnIndex(n[0])&&e.isLine(n[1]),e.isCompactPosition=n=>"number"==typeof n&&e.isColumnIndex(n>>5)&&e.isLine(31&n),e.isOrthogonalDirection=n=>_orthogonalDirection.includes(n),e.isDiagonalDirection=n=>_diagonalDirection.includes(n),e.isKnightDirection=n=>_knightDirection.includes(n),e.isCastlingColumn=n=>_castlingColumn.includes(n),e.isDirectionMoveRange=n=>e.isNumber(n)&&Number.isInteger(n)&&0<=n.valueOf()&&n.valueOf()<=5,e.isDirectionFullMoveRange=n=>e.isNumber(n)&&Number.isInteger(n)&&0<=n.valueOf()&&n.valueOf()<=11,e.isOrthogonalOrientation=i=>Array.isArray(i)&&_orthogonalOrientation.some(n=>n[0]==i[0]&&n[1]==i[1]),e.isDiagonalOrientation=i=>Array.isArray(i)&&_diagonalOrientation.some(n=>n[0]==i[0]&&n[1]==i[1]),e.isHexColor=n=>_hexColor.includes(n),e.isPieceName=n=>_pieceName.includes(n),e.isTurn=n=>_turn.includes(n),e.isSide=n=>"K"===n||"D"===n,e.isCastlingStatus=n=>_castlingStatus.includes(n),e.isCastlingString=n=>_castlingString.includes(n),e.isGrandCastlingString=n=>_grandCastlingString.includes(n),e.isSingleCheck=n=>Object.prototype.hasOwnProperty.call(n,"d")&&Object.prototype.hasOwnProperty.call(n,"p"),e.isDoubleCheck=n=>Array.isArray(n)&&3==length&&e.isPosition(n[0])&&e.isPosition(n[1])&&(null==n[2]||e.isOrthogonalOrientation(n[2])||e.isDiagonalOrientation(n[2])),e.hasDoubleCheckPin=n=>Array.isArray(n)&&3==length&&e.isPosition(n[0])&&e.isPosition(n[1])&&null!=n[2]&&(e.isOrthogonalOrientation(n[2])||e.isDiagonalOrientation(n[2])),e.isCheckAttackPos=(n,i)=>e.isPosition(n)?i[0]==n[0]&&i[1]==n[1]:e.isSingleCheck(n)?n.p[0]==i[0]&&n.p[1]==i[1]:n[0][0]==i[0]&&n[0][1]==i[1]||n[1][0]==i[0]&&n[1][1]==i[1]}(csTypes=csTypes||{}),function(i){i.columnFromIndex=n=>_column[n],i.toColumnIndex=n=>_column.indexOf(n),i.toCompactPosition=(n,i)=>n<<5+i,i.toCompactFromPosition=n=>i.toCompactPosition(n[0],n[1]),i.toPositionFromCompact=n=>[n>>5,31&n],i.getColumnFromCompact=n=>_column[n>>5],i.getColumnIndexFromCompact=n=>n>>5,i.getLineFromCompact=n=>31&n,i.toOrthogonalDirectionIndex=n=>_orthogonalDirection.indexOf(n),i.orthogonalDirectionFromIndex=n=>_orthogonalDirection[n],i.toDiagonalDirectionIndex=n=>_diagonalDirection.indexOf(n),i.diagonalDirectionFromIndex=n=>_diagonalDirection[n],i.toKnightDirectionIndex=n=>_knightDirection.indexOf(n),i.knightDirectionFromIndex=n=>_knightDirection[n],i.getOrthogonalOrientation=function(n){switch(n){case"ColumnUp":case"ColumnDown":return["ColumnUp","ColumnDown"];case"FileUp":case"FileInvDown":return["FileUp","FileInvDown"];case"FileInvUp":case"FileDown":return["FileInvUp","FileDown"];default:throw new Error(n)}},i.getDiagonalOrientation=function(n){switch(n){case"TransversalLineInc":case"TransversalLineDec":return["TransversalLineInc","TransversalLineDec"];case"LineUp":case"LineInvDown":return["LineUp","LineInvDown"];case"LineInvUp":case"LineDown":return["LineInvUp","LineDown"];default:throw new Error(n)}},i.otherSide=function(n){return"w"==n?"b":"w"},i.getPieceKeyColor=function(n){return assertCondition(csTypes.isTurn(n[0]),"key 1st char must have piece color"),n[0]},i.getPieceKeyName=function(n){return assertCondition(csTypes.isPieceName(n[1]),"key 2nd char must be piece symbol "+n),n[1]},i.getBishopKeyHexColor=function(n){return"J"!==n[1]?null:n.slice(2)},i.getRookKeySide=function(n){return"R"===n[1]&&csTypes.isSide(n[2])?n[2]:null},i.orthogonalDirections=function*(){for(const n of _orthogonalDirection)yield n},i.diagonalDirections=function*(){for(const n of _diagonalDirection)yield n},i.knightDirections=function*(){for(const n of _knightDirection)yield n}}(csConvert=csConvert||{});export{csTypes,csConvert};