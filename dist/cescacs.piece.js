import{csTypes as csty,csConvert as cscnv}from"./cescacs.types.js";import{PositionHelper}from"./cescacs.positionHelper.js";import{assertCondition,assertNonNullish}from"./ts.general.js";import{cspty}from"./cescacs.js";class Piece{color;static pieceValue(i){switch(i){case"K":return 256;case"D":return 15;case"V":return 14;case"R":return 11;case"G":return 8;case"N":return 4;case"J":return 3;case"E":case"M":return 2;case"P":return 1;default:throw new Error(i)}}static isRegainablePiece(i){switch(i){case"D":case"V":case"R":case"G":case"N":case"J":return!0;default:return!1}}_position;_pin;constructor(i){this.color=i}get position(){return this._position}setPositionTo(i){if(null!=this._position)throw new Error("Piece can't be reassigned to a new position");this._position=i}moveTo(i,o){null!=this._position&&(this._position[0]=i,this._position[1]=o)}get pin(){return this._pin}set pin(i){this._pin=i}get hasOrthogonalAttack(){return"R"==this.symbol||"V"==this.symbol||"D"==this.symbol}get hasDiagonalAttack(){return"J"==this.symbol||"G"==this.symbol||"D"==this.symbol}get hasKnightJumpAttack(){return"N"==this.symbol||"V"==this.symbol||"G"==this.symbol}get hasOnlyCloseAttack(){return"P"==this.symbol||"E"==this.symbol||"M"==this.symbol||"K"==this.symbol}get isRegainable(){return Piece.isRegainablePiece(this.symbol)}toString(){return this.uncapitalizedSymbol+this.position?.toString()}get uncapitalizedSymbol(){return"w"==this.color?this.symbol:this.symbol.toLowerCase()}get symbolPositionString(){return this.symbol+(null==this.position?"":PositionHelper.toString(this.position))}get uncapitalizedSymbolPositionString(){return this.uncapitalizedSymbol+(null==this.position?"":PositionHelper.toString(this.position))}canMoveTo(i,o){return PositionHelper.positionIteratorIncludes(this.moves(i),o)}canCaptureOn(i,o){return this.canMoveTo(i,o)}captured(){assertNonNullish(this._position,"Don't capture again the piece"),this._position=null}*blockThreat(i,o){yield*PositionHelper.positionIteratorIntersection(this.moves(i),o)}*knightMoves(i,o=!1){if(null!=this._position&&null==this.pin)for(const s of PositionHelper.knightMoves(this._position)){var t;!o&&null!=(t=i.hasPiece(s))&&t===this.color||(yield s)}}*orthogonalMoves(o,t=!1){if(null!=this._position)for(const n of(null==this.pin?null:csty.isOrthogonalOrientation(this.pin)?this.pin:[])??cscnv.orthogonalDirections()){var s=PositionHelper.orthogonalRide(this._position,n);let i=s.next();for(;0==i.done;){var e=o.hasPiece(i.value);i=null==e?(yield i.value,s.next()):(!t&&e===this.color||(yield i.value),s.return())}}}*diagonalMoves(o,t=!1){if(null!=this._position)for(const n of(null==this.pin?null:csty.isDiagonalOrientation(this.pin)?this.pin:[])??cscnv.diagonalDirections()){var s=PositionHelper.diagonalRide(this._position,n);let i=s.next();for(;!i.done;){var e=o.hasPiece(i.value);i=null==e?(yield i.value,s.next()):(!t&&e===this.color||(yield i.value),s.return())}}}orthogonalStep(i,o,t=!0,s=!1){return null!=this._position&&(null!=this.pin&&csty.isOrthogonalOrientation(this.pin)&&this.pin,null==this._pin||this._pin.includes(o))&&null!=(o=PositionHelper.orthogonalStep(this._position,o))&&(i=i.hasPiece(o),s||null==i||t&&i!==this.color)?o:null}diagonalStep(i,o,t=!0,s=!1){return null!=this._position&&(null==this._pin||this._pin.includes(o))&&null!=(o=PositionHelper.diagonalStep(this._position,o))&&(i=i.hasPiece(o),s||null==i||t&&i!==this.color)?o:null}canMoveOrthogonallyTo(i,o,t=!0){if(null!=this.position){var s=PositionHelper.isOrthogonally(this.position,o);if(null!=s&&(null==this._pin||this._pin.includes(s))){var e=i.hasPiece(o);if(null==e||t&&e!=this.color)for(const n of PositionHelper.orthogonalRide(this.position,s)){if(PositionHelper.equals(o,n))return!0;if(null!=i.hasPiece(n))return!1}}}return!1}canMoveDiagonallyTo(i,o,t=!0){if(null!=this.position){var s=PositionHelper.isDiagonally(this.position,o);if(null!=s&&(null==this._pin||this._pin.includes(s))){var e=i.hasPiece(o);if(null==e||t&&e!=this.color)for(const n of PositionHelper.diagonalRide(this.position,s)){if(PositionHelper.equals(o,n))return!0;if(null!=i.hasPiece(n))return!1}}}return!1}}class King extends Piece{key;symbol="K";value=0;_moved=!1;checkPosition=null;constructor(i){super(i),this.key=i+this.symbol}setPositionTo(i){super.setPositionTo(i),this._moved=!this.isInitialPosition}setToInitialPosition(){super.setPositionTo(this.initialPosiition),this._moved=!1}get checked(){return null!=this.checkPosition}get moved(){return this._moved}set castlingStatus(i){this._moved=this.isInitialPosition&&"-"==i}getCastlingStatus(i){var o;return this._moved?"-":(o=i.getPiece(PositionHelper.initialKingSideRookPosition(this.color,i.isGrand)),i=i.getPiece(PositionHelper.initialQueenSideRookPosition(this.color,i.isGrand)),null!=o&&o.color==this.color&&csPieceTypes.isRook(o)&&!o.moved?null!=i&&i.color==this.color&&csPieceTypes.isRook(i)&&!i.moved?"RKR":"KR":null!=i&&i.color==this.color&&csPieceTypes.isRook(i)&&!i.moved?"KR":"K")}moveTo(i,o){super.moveTo(i,o),this._moved=!0}*moves(i){if(this.checked){assertNonNullish(this.position),assertNonNullish(this.checkPosition);for(const n of cscnv.orthogonalDirections()){var o,t=PositionHelper.orthogonalStep(this.position,n);null==t||null!=this.pin&&this.pin.includes(n)&&!csty.isCheckAttackPos(this.checkPosition,t)||null!=(o=i.hasPiece(t))&&o==this.color||i.isThreatened(t,this.color)||(yield t)}for(const l of cscnv.diagonalDirections()){var s,e=PositionHelper.diagonalStep(this.position,l);null==e||null!=this.pin&&this.pin.includes(l)&&!csty.isCheckAttackPos(this.checkPosition,e)||null!=(s=i.hasPiece(e))&&s==this.color||i.isThreatened(e,this.color)||(yield e)}}else for(const r of this.attemptMoves(i))i.isThreatened(r,this.color)||(yield r)}markThreats(i){for(const o of this.attemptMoves(i,!0))i.setThreat(o,this.color)}computeCheckAndPins(t){this.checkPosition=null;for(const o of PositionHelper.knightMoves(this.position)){var i=t.getPiece(o);null!=i&&i.color!=this.color&&i.hasKnightJumpAttack&&this.setKnightOrCloseAttack(o)}for(const P of cscnv.orthogonalDirections()){var s=PositionHelper.orthogonalRide(this.position,P);let i=s.next(),o=!0;for(;!i.done;){var e=i.value,n=t.getPiece(e);if(null==n)o=!1,i=s.next();else{if(n.color!=this.color)o?n.hasOrthogonalAttack?this.setKnightOrCloseAttack(e,P):n.hasOnlyCloseAttack&&n.canCaptureOn(t,this.position)&&this.setKnightOrCloseAttack(e):n.hasOrthogonalAttack&&this.setOrthogonalAtack(e,P);else{var l=PositionHelper.orthogonalRide(e,P);let i=l.next();for(;!i.done;){var r=i.value,r=t.getPiece(r);i=null==r?l.next():(r.color!=this.color&&r.hasOrthogonalAttack&&(n.pin=cscnv.getOrthogonalOrientation(P)),l.return())}}i=s.return()}}}for(const g of cscnv.diagonalDirections()){var h=PositionHelper.diagonalRide(this.position,g);let i=h.next(),o=!0;for(;!i.done;){var c=i.value,a=t.getPiece(c);if(null==a)o=!1,i=h.next();else{if(a.color!=this.color)o?a.hasDiagonalAttack?this.setKnightOrCloseAttack(c,g):a.hasOnlyCloseAttack&&a.canCaptureOn(t,this.position)&&this.setKnightOrCloseAttack(c):a.hasDiagonalAttack&&this.setDiagonalAtack(c,g);else{var u=PositionHelper.diagonalRide(c,g);let i=u.next();for(;!i.done;){var p=i.value,p=t.getPiece(p);i=null==p?u.next():(p.color!=this.color&&p.hasDiagonalAttack&&(a.pin=cscnv.getDiagonalOrientation(g)),u.return())}}i=h.return()}}}}isKnightOrCloseCheck(){return null!=this.checkPosition&&csty.isPosition(this.checkPosition)}isSingleCheck(){return null!=this.checkPosition&&csty.isSingleCheck(this.checkPosition)}isDoubleCheck(){return null!=this.checkPosition&&!csty.isPosition(this.checkPosition)&&!csty.isSingleCheck(this.checkPosition)}get checkThreat(){return null!=this.checkPosition?csty.isPosition(this.checkPosition)?this.checkPosition:csty.isSingleCheck(this.checkPosition)?this.checkPosition.p:null:null}getSingleCheckBlockingPositions(i){var o=[];if(assertNonNullish(this.position),csty.isSingleCheck(this.checkPosition)){var t=this.checkPosition.d;if(csty.isDiagonalDirection(t))for(const s of PositionHelper.diagonalRide(this.position,t)){if(null!=i.hasPiece(s))break;o.push(s)}else if(csty.isOrthogonalDirection(t))for(const e of PositionHelper.orthogonalRide(this.position,t)){if(null!=i.hasPiece(e))break;o.push(e)}}return o}setOrthogonalAtack(i,o){if(null!=this.checkPosition)if(csty.isPosition(this.checkPosition))this.checkPosition=[this.checkPosition,i,null],this.pin=cscnv.getOrthogonalOrientation(o);else{if(!csty.isSingleCheck(this.checkPosition))throw new Error("Triple check situation can't be achieved in the course of a game");this.checkPosition=[this.checkPosition.p,i,cscnv.getOrthogonalOrientation(o)]}else this.checkPosition={p:i,d:o},this.pin=cscnv.getOrthogonalOrientation(o)}setDiagonalAtack(i,o){if(null!=this.checkPosition)if(csty.isPosition(this.checkPosition))this.checkPosition=[this.checkPosition,i,null],this.pin=cscnv.getDiagonalOrientation(o);else{if(!csty.isSingleCheck(this.checkPosition))throw new Error("Triple check situation can't be achieved in the course of a game");this.checkPosition=[this.checkPosition.p,i,cscnv.getDiagonalOrientation(o)]}else this.checkPosition={p:i,d:o},this.pin=cscnv.getDiagonalOrientation(o)}setKnightOrCloseAttack(i,o){if(null!=this.checkPosition){if(csty.isPosition(this.checkPosition))throw new Error("Double knight or close check situation can't be achieved in the course of a game");if(!csty.isSingleCheck(this.checkPosition))throw new Error("Triple check situation can't be reached along a game");null==o?this.checkPosition=[this.checkPosition.p,i,null]:csty.isOrthogonalDirection(o)?this.checkPosition=[this.checkPosition.p,i,cscnv.getOrthogonalOrientation(o)]:this.checkPosition=[this.checkPosition.p,i,cscnv.getDiagonalOrientation(o)]}else this.checkPosition=i,null!=o&&(this.pin=csty.isOrthogonalDirection(o)?cscnv.getOrthogonalOrientation(o):cscnv.getDiagonalOrientation(o))}*orthogonalStepList(i,o){assertNonNullish(this.position);for(const e of cscnv.orthogonalDirections()){var t,s=PositionHelper.orthogonalStep(this.position,e);null==s||!o&&null!=(t=i.hasPiece(s))&&t===this.color||(yield s)}}*diagonalStepList(i,o){assertNonNullish(this.position);for(const e of cscnv.diagonalDirections()){var t,s=PositionHelper.diagonalStep(this.position,e);null==s||!o&&null!=(t=i.hasPiece(s))&&t===this.color||(yield s)}}*attemptMoves(i,o=!1){yield*this.orthogonalStepList(i,o),yield*this.diagonalStepList(i,o),this._moved||this.checked||(yield*this.knightMoves(i))}get initialPosiition(){return"w"==this.color?PositionHelper.whiteKingInitPosition:PositionHelper.blackKingInitPosition}get isInitialPosition(){return null!=this.position&&8==this.position[0]&&("w"==this.color&&1==this.position[1]||"b"==this.color&&27==this.position[1])}}class Queen extends Piece{key;symbol="D";value=15;constructor(i,o,t){super(i),this.key=i+this.symbol,void 0!==o&&(assertCondition(csty.isColumn(o)),assertNonNullish(t,"line of the column"),super.setPositionTo(PositionHelper.fromBoardPosition(o,t,!0)))}*moves(i){yield*this.orthogonalMoves(i),yield*this.diagonalMoves(i)}canMoveTo(i,o){return super.canMoveOrthogonallyTo(i,o)||super.canMoveDiagonallyTo(i,o)}markThreats(i){for(const o of this.orthogonalMoves(i,!0))i.setThreat(o,this.color);for(const t of this.diagonalMoves(i,!0))i.setThreat(t,this.color)}}class Wyvern extends Piece{key;symbol="V";value=14;constructor(i,o,t){super(i),this.key=i+this.symbol,void 0!==o&&(assertCondition(csty.isColumn(o)),assertNonNullish(t,"line of the column"),super.setPositionTo(PositionHelper.fromBoardPosition(o,t,!0)))}*moves(i){yield*this.orthogonalMoves(i),yield*this.knightMoves(i)}canMoveTo(i,o){return super.canMoveOrthogonallyTo(i,o)||PositionHelper.positionIteratorIncludes(this.knightMoves(i),o)}markThreats(i){for(const o of this.orthogonalMoves(i,!0))i.setThreat(o,this.color);for(const t of this.knightMoves(i,!0))i.setThreat(t,this.color)}}class Rook extends Piece{key;symbol="R";value=11;_moved;constructor(i,o,t,s){super(i),void 0!==s?(assertCondition(csty.isColumn(t)),super.setPositionTo(PositionHelper.fromBoardPosition(t,s,!0)),this.key=i+this.symbol+(this.isKingSide(o)?"k":this.isQueenSide(o)?"q":t+s),this._moved=!this.isKingSide(o)&&!this.isQueenSide(o)):(assertCondition("number"==typeof t,"instance number of piece "+this.symbol),this.key=i+this.symbol+t,this._moved=!1)}setPositionTo(i){super.setPositionTo(i),this._moved=!(this.isQueenSide(!1)||this.isKingSide(!1)||this.isQueenSide(!0)||this.isKingSide(!0))}isQueenSide(i){return null!=this.position&&(i?3==this.position[0]&&("w"==this.color?4==this.position[1]:24==this.position[1]):4==this.position[0]&&("w"==this.color?3==this.position[1]:25==this.position[1]))}isKingSide(i){return null!=this.position&&(i?11==this.position[0]&&("w"==this.color?4==this.position[1]:24==this.position[1]):10==this.position[0]&&("w"==this.color?3==this.position[1]:25==this.position[1]))}*moves(i){yield*this.orthogonalMoves(i)}moveTo(i,o){super.moveTo(i,o),this._moved=!0}canMoveTo(i,o,t=!0){return super.canMoveOrthogonallyTo(i,o,t)}markThreats(i){for(const o of this.orthogonalMoves(i,!0))i.setThreat(o,this.color)}setCastlingStatus(i,o){this._moved=this.isQueenSide(o)?!i.startsWith("R"):!this.isKingSide(o)||!i.endsWith("R")}get moved(){return this._moved}}class Pegasus extends Piece{key;symbol="G";value=8;constructor(i,o,t){super(i),void 0!==t?(assertCondition(csty.isColumn(o)),super.setPositionTo(PositionHelper.fromBoardPosition(o,t,!0)),this.key=i+this.symbol+o+t):(assertCondition("number"==typeof o,"instance number of piece "+this.symbol),this.key=i+this.symbol+o)}*moves(i){yield*this.diagonalMoves(i),yield*this.knightMoves(i)}canMoveTo(i,o){return super.canMoveDiagonallyTo(i,o)||PositionHelper.positionIteratorIncludes(this.knightMoves(i),o)}markThreats(i){for(const o of this.diagonalMoves(i,!0))i.setThreat(o,this.color);for(const t of this.knightMoves(i,!0))i.setThreat(t,this.color)}}class Knight extends Piece{key;symbol="N";value=4;constructor(i,o,t){super(i),void 0!==t?(assertCondition(csty.isColumn(o)),super.setPositionTo(PositionHelper.fromBoardPosition(o,t,!0)),this.key=i+this.symbol+o+t):(assertCondition("number"==typeof o,"instance number of piece "+this.symbol),this.key=i+this.symbol+o)}*moves(i){if(yield*this.knightMoves(i),null!=this.position&&null==this.pin)for(const t of cscnv.knightDirections()){var o=PositionHelper.knightJump(this.position,t);null!=o&&null==i.hasPiece(o)&&null!=(o=PositionHelper.knightJump(o,t))&&null==i.hasPiece(o)&&(yield o)}}canCaptureOn(i,o){return PositionHelper.positionIteratorIncludes(this.knightMoves(i),o)}markThreats(i){for(const o of this.knightMoves(i,!0))i.setThreat(o,this.color)}}class Bishop extends Piece{key;symbol="J";value=3;hexesColor;constructor(i,o,t){if(super(i),void 0!==t)assertCondition(csty.isColumn(o)),super.setPositionTo(PositionHelper.fromBoardPosition(o,t,!0)),this.hexesColor=PositionHelper.hexColor(this.position);else{if(!csty.isHexColor(o))throw new TypeError("Bishop constructor error");this.hexesColor=o}this.key=i+this.symbol+this.hexesColor}*moves(i){yield*super.diagonalMoves(i)}canMoveTo(i,o){return super.canMoveDiagonallyTo(i,o)}markThreats(i){for(const o of super.diagonalMoves(i,!0))i.setThreat(o,this.color)}}class Elephant extends Piece{key;symbol="E";value=2;constructor(i,o,t){super(i),assertCondition(csty.isColumn(o)),super.setPositionTo(PositionHelper.fromBoardPosition(o,t,!0)),this.key=i+this.symbol+o+t}*moves(i,o=!1){var t=this.position;if(null!=t){var s,e,n,l,r,h,c=this.pin;(null==c||"ColumnUp"==c[0]&&"ColumnDown"==c[1])&&null!=(s=PositionHelper.orthogonalStep(t,this.ownOrthogonalDirection))&&(null==(e=i.hasPiece(s))?(yield s,null==(l=PositionHelper.orthogonalStep(s,this.ownOrthogonalDirection))||null!=(n=i.hasPiece(l))&&!o&&n==this.color||(yield l)):e!=this.color?(yield s,o&&(n=i.getPiece(s),cspty.isKing(n))&&null!=(l=PositionHelper.orthogonalStep(s,this.ownOrthogonalDirection))&&null==i.hasPiece(l)&&(yield l)):o&&(yield s));for(const a of["LineUp","LineInvUp","LineDown","LineInvDown"])null!=c&&!c.includes(a)||null==(r=PositionHelper.diagonalStep(t,a))||null!=(h=i.hasPiece(r))&&!o&&h==this.color||(yield r)}}markThreats(i){for(const o of this.moves(i,!0))i.setThreat(o,this.color)}get ownOrthogonalDirection(){return"w"===this.color?"ColumnUp":"ColumnDown"}}class Almogaver extends Piece{key;symbol="M";value=2;constructor(i,o,t){super(i),assertCondition(csty.isColumn(o)),super.setPositionTo(PositionHelper.fromBoardPosition(o,t,!0)),this.key=i+this.symbol+o+t}*moves(i,o=!1){var t=this.position;if(null!=t){var s,e,n,l,r=this.pin;if(!o)for(const h of cscnv.orthogonalDirections())null!=r&&!r.includes(h)||null==(s=PositionHelper.orthogonalStep(t,h))||null!=i.hasPiece(s)||null==(s=PositionHelper.orthogonalStep(s,h))||null!=i.hasPiece(s)||(yield s);for(const c of cscnv.diagonalDirections())null!=r&&!r.includes(c)||null==(e=PositionHelper.diagonalStep(t,c))||(null==(n=i.hasPiece(e))?null!=(l=i.specialPawnCapture)&&l.isEnPassantCapturable()&&l.isEnPassantCapture(e)&&(yield e):n!==this.color&&(yield e))}}canCaptureOn(i,o){return PositionHelper.positionIteratorIncludes(this.moves(i,!0),o)}markThreats(i){var o=this.position;if(null!=o){var t,s=this.pin;for(const e of cscnv.diagonalDirections())null!=s&&!s.includes(e)||null==(t=PositionHelper.diagonalStep(o,e))||i.setThreat(t,this.color)}}}class Pawn extends Piece{key;symbol="P";value=1;constructor(i,o,t){super(i),assertCondition(csty.isColumn(o)),super.setPositionTo(PositionHelper.fromBoardPosition(o,t,!0)),this.key=i+this.symbol+o+t}*moves(i,o=!1){var t=this.position;if(null!=t){var s=this.pin;if(!o){var e,n,o=this.ownOrthogonalStraightDirection;(null==s||"ColumnUp"==s[0]&&"ColumnDown"==s[1])&&null!=(e=PositionHelper.orthogonalStep(t,o))&&null==i.hasPiece(e)&&(yield e,null!=(e=PositionHelper.orthogonalStep(e,o)))&&null==i.hasPiece(e)&&(yield e,this.hasTripleStep(i.isGrand))&&null!=(e=PositionHelper.orthogonalStep(e,o))&&null==i.hasPiece(e)&&(yield e);for(const c of this.ownOrthogonalAlternateDirections)null!=s&&!s.includes(c)||null==(n=PositionHelper.orthogonalStep(t,c))||null!=i.hasPiece(n)||(yield n)}var l,r,h=i.specialPawnCapture;null!=h&&h.isScornfulCapturable()&&h.isScorned(this)&&(null==this.pin||null!=(o=PositionHelper.isOrthogonally(t,h.capturablePiece.position))&&this.pin.includes(o))&&(yield h.capturablePiece.position);for(const a of this.ownCaptureDirections)null!=s&&!s.includes(a)||null==(l=PositionHelper.diagonalStep(t,a))||(null!=(r=i.hasPiece(l))?r!=this.color&&(yield l):null!=h&&h.isEnPassantCapturable()&&h.isEnPassantCapture(l)&&(yield l))}}canCaptureOn(i,o){return PositionHelper.positionIteratorIncludes(this.moves(i,!0),o)}markThreats(i){var o=this.position;if(null!=o){var t,s=this.pin;for(const e of this.ownCaptureDirections)null!=s&&!s.includes(e)||null==(t=PositionHelper.diagonalStep(o,e))||i.setThreat(t,this.color)}}hasTripleStep(i){var o,t=this.position;return null!=t&&(4<(o=t[0])&&o<7||!i&&(3==o||4==o)?t[1]==("w"==this.color?o+1:27-o):7<o&&o<10||!i&&(10==o||11==o)?t[1]==("w"==this.color?15-o:13+o):!!i&&(3==o||11==o?t[1]==("w"==this.color?6:22):(4==o||10==o)&&t[1]==("w"==this.color?7:21)))}promoteTo(i){assertNonNullish(this.position,"Pawn to promote is not captured"),assertCondition(PositionHelper.isPromotionHex(this.position,this.color),"Promotion hex "+PositionHelper.toString(this.position)),i.setPositionTo(this.position),this.captured()}get awaitingPromotion(){return null!=this.position&&PositionHelper.isPromotionHex(this.position,this.color)?PositionHelper.lineHexColor(this.position[1]):null}get ownOrthogonalStraightDirection(){return"w"===this.color?"ColumnUp":"ColumnDown"}get ownOrthogonalAlternateDirections(){return"w"===this.color?["FileUp","FileInvUp"]:["FileDown","FileInvDown"]}get ownCaptureDirections(){return"w"==this.color?["LineUp","LineInvUp"]:["LineDown","LineInvDown"]}}var csPieceTypes;!function(i){i.isKing=function(i){return"K"==i.symbol},i.isQueen=function(i){return"D"==i.symbol},i.isWyvern=function(i){return"V"==i.symbol},i.isRook=function(i){return"R"==i.symbol},i.isPegasus=function(i){return"G"==i.symbol},i.isKnight=function(i){return"N"==i.symbol},i.isBishop=function(i){return"J"==i.symbol},i.isElephant=function(i){return"E"==i.symbol},i.isPawn=function(i){return"P"==i.symbol},i.isAlmogaver=function(i){return"M"==i.symbol},i.isMajorPiece=function(i){return["D","V","R"].includes(i.symbol)},i.isMinorPiece=function(i){return"J"==i.symbol||"N"==i.symbol},i.isMediumPiece=function(i){return"G"==i.symbol},i.isTroup=function(i){return["P","E","M"].includes(i.symbol)}}(csPieceTypes=csPieceTypes||{});export{Piece,King,Queen,Wyvern,Rook,Pegasus,Knight,Bishop,Elephant,Almogaver,Pawn,csPieceTypes};